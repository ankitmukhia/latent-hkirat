// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id 		String @id @default(uuid())
	number 		String @unique
	name 	  	String?
	verified 	Boolean @default(false)
	booking		Booking[]
	payment		Payment[]
}

model Admin{
	id 		String @id @default(uuid())
	number 		String @unique
	name 	  	String
	verified 	Boolean @default(false)
	event		Event[]
}

model Event {
	id    		String @id @default(uuid())
	name  		String
	description 	String
	banner		String
	published	Boolean @default(false)
	ended		Boolean	@default(false)
	startTime	DateTime
	adminId		String
	admin 		Admin @relation(fields: [adminId], references: [id])
	locationId	String
	location	Location @relation(fields: [locationId], references: [id])
	booking		Booking[]
	payment		Payment[]
	seatTypes	SeatType[]
}

model Location {
	id String @id 	@default(uuid())
	name		String
	description 	String
	imageUrl	String
	evnet		Event[]
}

model Booking {
	id    		String @id @default(uuid())
	eventId		String
	bookingId       String
	event		Event   @relation(fields: [bookingId], references: [id])
	userId		String
	user		User	@relation(fields: [userId], references: [id])
	seats		Seat[]
	status		BookingStatus
}

model Seat {
	id		String 	@id   @default(uuid())
	seatTypeId   	String
	seat		SeatType	@relation(fields: [seatTypeId], references: [id])
	bookingId	String
	booking		Booking		@relation(fields: [bookingId], references: [id])
	qr		String
}

model SeatType {
	id		String 	@id   @default(uuid())
	name 		String
	description	String
	price		Int
	capacity	Int
	seats		Seat[]
	filled		Int @default(0)
	locked 		Int @default(0)
	eventId		String
	event		Event @relation(fields: [eventId], references: [id])
}

model Payment {
	id		String 	@id   @default(uuid())
	userId		String
	user		User		@relation(fields: [userId], references: [id])
	eventId		String
	event		Event		@relation(fields: [eventId], references: [id])
	status		PaymentStatus
}

enum PaymentStatus {
	Success
	Fail
	Pending
}

enum BookingStatus {
	Pending
	Confirmed
	Timeout
}
